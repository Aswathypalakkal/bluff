<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>BLUFF</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.12.0/css/all.css">
</head>

<body>

  <!-- Start: main -->
  <div class="container-fluid py-3">
    <!-- Start: players container -->
    <div class="playersContainer col-12 px-4" id="player-container">




    </div>
    <!-- End: players container -->
    <!-- Start: playing cards container -->
    <div class="col-12 cardsContainer" id="card-container">


    </div>
    <!-- End: playing cards container -->
    <div class="playGround my-5">
      <div class="col-6 col-sm-5 selectionContainer p-4">
        <label class="form-label">Selected cards</label>
        <!-- Start: selected cards container -->
        <div class="col-12 cardsContainer" id="container_placing">


        </div>
        <!-- End: selected cards container -->
        <div class="buttonContainer"><input id="input" type="text" class="col-3 col-lg-1"
            placeholder="bluff here"><button id="place-btn" class="btn btn-primary" type="button" onclick="placeCards()"
            disabled="true">Place</button></div>
      </div>
      <div class="col-6 col-sm-5 selectionContainer p-4">
        <label class="form-label">Cards played</label>
        <!-- Start: played cards container -->
        <div class="col-12 cardsContainer" id="container_played">
        </div>
        <!-- End: played cards container -->
        <div class="buttonContainer"><button id="raise-btn" class="btn btn-primary" type="button" onclick="raisecards()"
            disabled="true">Raise</button><button id="pass-btn" class="btn btn-primary" type="button"
            disabled="true">Pass</button></div>
      </div>
    </div>
  </div><!-- End: main -->



  <script defer src="http://localhost:3000/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.7/dist/umd/popper.min.js"
    integrity="sha384-zYPOMqeu1DAVkHiLqWBUTcbYfZ8osu1Nd6Z89ify25QV9guujx43ITvfi12/QExE"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.min.js"
    integrity="sha384-Y4oOpwW3duJdCWv5ly8SCFYWqFDsfob/3GkgExXKV4idmbt98QcxXYs9UoXAB7BZ"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"
    crossorigin="anonymous"></script>
</body>

</html>
<style>
  .playersContainer {
    display: flex;
    justify-content: center;
    gap: 9px;
  }

  .cards {
    height: 120px;
    border-radius: 8px;
    /*border: solid;*/
    /*border-width: 1px;*/
    background-color: #cccccc;
  }

  .cardsContainer {
    display: flex;
    gap: 5px;
    margin-top: 15px;
    overflow-x: scroll;
    /* justify-content: center;*/
  }

  .playGround {
    display: flex;
    /*height: 100%;*/
    align-items: center;
    justify-content: space-between;
  }

  .buttonContainer {
    display: flex;
    justify-content: center;
    gap: 15px;
  }

  .selectionContainer {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .user {
    display: flex;
    flex-direction: column;
    font-size: 20px;
    align-items: center;
    border: solid;
    border-width: 1px;
  }

  /*.friendsContainer {
    display: flex;
    gap: 5px;
  }*/


  .loading-animation {
    /* Add your loading animation styles here */
    /* For example, you can use a CSS spinner animation */
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    animation: spin 2s linear infinite;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .text-element {
    margin-top: 10px;
    text-align: center;

  }
</style>
<script src="/socket.io/socket.io.js"></script>

<script>

  var pos;
  var next;
  var selectedCards = [];

  var socket = io();

  socket.on('STOC-SET-NUMBER-OF-PLAYERS', (total) => {
    const playerContainer = document.getElementById('player-container')
    for (i = 1; i <= total; i++) {
      playerContainer.innerHTML += `<div class="user p-1"><i class="far fa-user"></i><span id="user${i}">user${i}</span></div>`
    }
  })


  socket.on('STO1C-SET-POSITION', (index) => {
    pos = index;
    var player = document.getElementById(`user${pos}`)
    player.innerHTML = ''
    player.innerText = 'You'
    console.log("playorder:", index);
  });


  function startShufflingEffect() {
    // Get the card container element
    const cardContainer = document.getElementById('card-container');
    // Create loading animation and text elements
    const loadingAnimation = document.createElement('div');
    loadingAnimation.classList.add('loading-animation');
    const textElement = document.createElement('div');
    textElement.classList.add('text-element');
    textElement.classList.add('col-12')

    textElement.textContent = 'Card is shuffling';
    // Append loading animation and text elements to the card container
    cardContainer.innerHTML = '';
    cardContainer.appendChild(loadingAnimation);
    cardContainer.appendChild(textElement);
    // Remove loading animation and text elements after 4 seconds
    setTimeout(() => {
      cardContainer.innerHTML = '';
    }, 3000);
  }

  socket.on('STOC-SHUFFLING', (data) => {
    console.log(data)
    startShufflingEffect();
  });



  const toSelected = (card, newCard, cardContainer) => {
    //console.log("clicked card:", card);
    selectedCards.push(card);

    cardContainer.removeChild(newCard);
    newCard.className = 'col-6 col-sm-4 col-lg-2 offset-lg-0 cards'
    const selectionContainer = document.getElementById('container_placing');
    selectionContainer.appendChild(newCard);
    newCard.addEventListener('click', () => {
      selectedCards.splice(selectedCards.indexOf(card), 1);
      console.log(selectedCards);
      selectionContainer.removeChild(newCard);
      newCard.className = 'col-4 col-sm-2 col-lg-1 offset-lg-0 cards ';
      cardContainer.appendChild(newCard);
      newCard.addEventListener('click', () => {
        toSelected(card, newCard, cardContainer);

      }, { once: true })
    }, { once: true });
  }

  function get_value(item){
    if (item === 'A')
      return 1;
    else if (item === 'J')
      return 11;
    else if (item === 'Q')
      return 12;
    else if (item === 'K')
      return 13;
    else
      return parseInt(item)
  }

  function sort_cards(container_id){
    var childrens = document.getElementById(container_id).children;
    console.log('Sorting cards in '+container_id);

    childrensArray = Array.prototype.slice.call(childrens, 0);

    childrensArray.sort(function(a, b) {
        // Slice() is used instead [1] to get input '10'
        var aord = a.textContent.slice(1);
        var bord = b.textContent.slice(1);
        var a = get_value(aord);
        var b = get_value(bord);
        return a-b;
    });

    var parent = document.getElementById(container_id);
    parent.innerHTML = "";

    for(var i = 0, l = childrensArray.length; i < l; i++) {
      parent.appendChild(childrensArray[i]);
    }
  }

  socket.on('STO1C-DRAW-CARDS', (subpartition) => {
    console.log("received subpartition:", subpartition);
    const cardContainer = document.getElementById('card-container');

    cardContainer.innerHTML = '';
    // Loop through each card in the subpartition array
    subpartition.forEach((card) => {
      // Create a new card element
      const newCard = document.createElement('div');
      newCard.className = 'col-4 col-sm-2 col-lg-1 offset-lg-0 cards ';
      newCard.id = card.suit + card.value;
      newCard.setAttribute('tabindex', '0');
      newCard.textContent = card.suit + card.value;
      newCard.addEventListener('click', () => {
        toSelected(card, newCard, cardContainer);
      }, { once: true });
      // Append the card to the card container;
      cardContainer.appendChild(newCard);
    });

    sort_cards('card-container');
  });

  socket.on('STOC-SET-WHOS-TURN', (nextPlayerPosition) => {
    next = nextPlayerPosition;

    console.log("next player is:player", next);
    if (next === pos) {
      console.log("your turn comes");
      const placeBtn = document.getElementById('place-btn')
      placeBtn.disabled = false;

      //Fixme : pass button should not be visible on new game start
      const passBtn = document.getElementById('pass-btn')
      passBtn.disabled = false;

    }
    else {
      const placeBtn = document.getElementById('place-btn')
      placeBtn.disabled = true;
      const passBtn = document.getElementById('pass-btn')
      passBtn.disabled = true;
    }

  });

  const placeCards = () => {
    var cardContainer = document.getElementById('card-container');
    var cards_remaining = cardContainer.childElementCount;

    var input = document.getElementById('input');
    var bluff_text = input.value
    input.value = ''

    socket.emit('CTOS-PLACE-CARD', selectedCards, bluff_text, cards_remaining);
    selectedCards = [];
    const selectionContainer = document.getElementById('container_placing');
    selectionContainer.innerHTML = '';    

    const placeBtn = document.getElementById('place-btn')
    placeBtn.disabled = true;
  }

  socket.on('STOC-RAISE-TIME-START', () => {
    console.log("raise time starts");
    if (pos != next) {
      const raiseBtn = document.getElementById('raise-btn')
      raiseBtn.disabled = false;
    }
  });


  socket.on('STOC-RAISE-TIME-OVER', () => {
    console.log("raise time over")
    const raiseBtn = document.getElementById('raise-btn')
    raiseBtn.disabled = true;
  });


  socket.on('STOC-GAME-PLAYED', (CardCount, bluffText) => {
    console.log("STOC-GAME-PLAYED:", CardCount, bluffText)
    //textElement.textContent = `${CardCount} ${InputValue}`;
    const playingContainer = document.getElementById('container_played');
    for (var i = 1; i <= CardCount; i++) {
      // Create a new card element
      const newCard = document.createElement('div');
      newCard.className = 'col-4 col-sm-2 col-lg-1 offset-lg-0 cards ';
      newCard.id = bluffText;
      newCard.setAttribute('tabindex', '0');
      newCard.textContent = bluffText;

      // Append the card to the card container;
      playingContainer.appendChild(newCard);
    }
  });


  function raisecards() {
    console.log("Raise");
    socket.emit('CTOS-RAISE');

    // To avoid further calls
    const raiseBtn = document.getElementById('raise-btn')
    raiseBtn.disabled = true;
  }


  //make show the opened cards to all the users by the event coming from server side which is showopencards with the set of openedcards which is poppedElements
  socket.on('STOC-SHOW-RAISED-CARDS', (poppedElements, poppedSuits) => {
    console.log("openedcards:", poppedElements);
    // Get a reference to the OpenedCards div
    //var openedCardsDiv = document.querySelector('.OpenedCards');
    const playedContainer = document.getElementById('container_played');
    // Clear the existing content of the OpenedCards div
    //playedContainer.innerHTML = '';

    poppedElements.forEach((element, index) => {
      playedContainer.removeChild(playedContainer.lastChild);
    });



    // Create a new element for each popped element and add it to the OpenedCards div
    poppedElements.forEach((element, index) => {
      var cardElement = document.createElement('div');
      cardElement.className = 'col-4 col-sm-2 col-lg-1 offset-lg-0 cards ';
      cardElement.textContent = poppedSuits[index] + element;;
      playedContainer.appendChild(cardElement);
      //cardContainer.appendChild(cardElement);
    });
  });

  socket.on('STOC1C-DUMP-PENALTY-CARDS', (CardStack, poppedElements, SuitStack, poppedSuits) => {
    var suitsBack = [];
    var cardsGivingBack = [];
    while (poppedElements.length > 0) {
      cardsGivingBack.push(poppedElements.pop());
      suitsBack.push(poppedSuits.pop());
    }
    // Push values from stack2 to the combinedStack
    while (CardStack.length > 0) {
      cardsGivingBack.push(CardStack.pop());
      suitsBack.push(SuitStack.pop());
    }
    //console.log("cards for faileduser:",CardStack,poppedElements);
    console.log("cards for faileduser:", cardsGivingBack);
    console.log("suits for faileduser:", suitsBack);
    const cardContainer = document.getElementById('card-container');
    cardsGivingBack.forEach((cardvalue, index) => {
      const newCard = document.createElement('div');
      newCard.className = 'col-4 col-sm-2 col-lg-1 offset-lg-0 cards ';
      newCard.id = suitsBack[index] + cardvalue;
      newCard.setAttribute('tabindex', '0');
      newCard.textContent = suitsBack[index] + cardvalue;
      newCard.style.backgroundColor = "#ff0000";
      newCard.addEventListener('click', () => {
        toSelected(newCard.textContent, newCard, cardContainer);
      }, { once: true });
      // Append the card to the card container;
      cardContainer.appendChild(newCard);
    });
    console.log("Number of cards in the container:", cardContainer.childElementCount);
    containerCount = cardContainer.childElementCount;

    sort_cards('card-container');
  })

  socket.on('STOC-PLAYER-WON', () => {
    console.log("congrats you won  🎉🎉");
  });
  

  socket.on('disconnect', () => {
    // Handle the disconnection
    console.log('Disconnected from the server.');
  });


</script>
