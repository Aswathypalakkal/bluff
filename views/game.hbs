<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>BLUFF</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
  </head>
  
  <body>
    <div class="row"> 
  <section style="margin-top:0px;">
    <div class="col-md-12"> 
    <div class="profile" style="width: 18rem;height:2rem; margin-top:0%">
  <img class=" img" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQtYqXjw6IR_opev4UADLjT8TPcLmWYQsx_YQ&usqp=CAU " class="card-img-top" alt="...">
  <div class="card-body">
    <h5 class="card-title">aswathy</h5>
  </div>
    </div>
    </div>
  
<div class="card-container">
  <div class="row">
   <div class="col-md-12">
 {{#each  cardset}}
  <div class="card" onclick="stackCards(this)">{{this.suit}}{{this.value}}</div>
{{/each}}
  </div>
  </div>
</div>
  </section>
  <section> 
<div class="button"> 
<!--<button class="scroll-left-btn" >Scroll Left</button>
<button class="scroll-right-btn">Scroll Right</button>-->
<button class="place" >place</button>
<button class="open">open</button>
<button class="pass">pass</button>
</div>
  </section>

<section style="width: 115px;">
  <div class="newposition"></div>
  
</section>
<section style="margin-top: 100px;margin-left:43.5%"> 
    <div class="oppprofile" style="width: 18rem;height:2rem;">
  <img class=" img" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQtYqXjw6IR_opev4UADLjT8TPcLmWYQsx_YQ&usqp=CAU " class="card-img-top" alt="...">
  <div class="card-body">
    <h5 class="card-title">opponent</h5>
  </div>
</div>
  
</section>
</div>
    <script defer src="http://localhost:3000/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.7/dist/umd/popper.min.js" integrity="sha384-zYPOMqeu1DAVkHiLqWBUTcbYfZ8osu1Nd6Z89ify25QV9guujx43ITvfi12/QExE" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.min.js" integrity="sha384-Y4oOpwW3duJdCWv5ly8SCFYWqFDsfob/3GkgExXKV4idmbt98QcxXYs9UoXAB7BZ" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script>
  </body>
</html>
<style> 
  body{
      height: 100%;
      width: 100%;
      margin: 0;
      padding: 0;
      
    }
  .img {
     height: 80px;
    width: 100px ;
  }
  .profile{
  position:absolute;
  height: 160px;
  margin-left: 45%;

  margin-right: 45%;
  margin-top: 0%;
  }
  
.card-container 
{
  width: 95%;
  height: 120px;
  overflow-x: scroll;
  white-space: nowrap;
  margin-top: 108px;
  
  margin-left: 30px;
}  
.card {
  font-size:medium;
  display: inline-block;
  width: 80px;
  height: 100px;
  margin-right: 20px;
  background-color: #ccc;
  border-radius: 10px;
}
.newposition{
position:absolute;
margin-top:200px ;
margin-left: 400px;
margin-right: auto;

top:100px; 
left:200px; 

}
.button{
  position:absolute;
  margin-top:0px;
  margin-left: 40%;
  margin-right: 40%;
  height: 110px;
  width: 500px;
}
.oppprofile{
margin-top: 110px;
}
.place,.open,.pass{
  
  margin-top: 20px;
  width: 70px;
  height: 50px;
  border-radius: 20px;
}
 </style>
 <script src="/socket.io/socket.io.js"></script>
 <script> 
  var socket =io();
const PlaceBtn = document.querySelector('.place');
var PlaceClicked;
PlaceBtn.addEventListener('click',()=>{
PlaceClicked = true
console.log(PlaceClicked)
})
function stackCards(card){
  if (PlaceClicked) {
    card.classList.add('newposition');
socket.emit('customRoomEvent', card);
  }
  }

 // const socket = io.connect('http://localhost:3000');

// Join a room
/*socket.on('connect', () => {
  socket.emit('joinRoom');
});*/
// Receive room messages
//Handle the 'roomFull' event when the room reaches its capacity


// Handle disconnection from the server
socket.on('disconnect', () => {
  // Handle the disconnection
  console.log('Disconnected from the server.');
});
// Emit a custom room event

// Receive a response from the server for the custom room event
socket.on('customRoomResponse', (response) => {
  // Handle the response
  console.log('Received response from the server:', response);
});

 </script>